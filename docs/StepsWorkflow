----------------------------------------------------------------------------------
In loaded file:
----------------------------------------------------------------------------------
- stance/swing/NaN for each limb on a frame by frame basis, generated by tree-based classifier (lightGBM)

----------------------------------------------------------------------------------
In GetRunsAndLoco.py:
----------------------------------------------------------------------------------
1. Trial identification
    - Door Opening and Closing Detection
    - Mouse Presence Filtering
    - Trimming of frames before and after door opening and closing
    - Manual trial removal

2. Run identification
    - Find the real transitioning run amongst potential runbacks and backwards running
        - Based on mouse facing forward, entering the start of the platform (to avoid backwards run -->
          forward mid belt), and not having already passed the transition point during the run

(N.B. limb data used from here)

3. Runstage identification

3a. Acquire step_data, limb_data and paw_touchdown
    - limb_data = raw x/y/z data for each limb marker (4 limbs Ã— 4 markers each)  for whole trial
    - step_data = raw swing/stance/NaN data for each limb (4 limbs) for whole trial
    - paw_touchdown = True/False for touchdown(/stance) on the belt for the whole trial. Stance frames
      are filtered by mean x position of paw > 0 (i.e. on the belt)

3b. Finding run starts
    - Find the frame and paw (will be hindpaw) where all 4 limbs have touched down on the belt (** often having issues with this)
    - Also filter touchdown frames to where mean z position of paw < 2 (**** sometimes tracking errors
      mean this is not met, have introduced a lenient alternative)
    - Then, for each paw:
        - find the touchdown blocks preceding the x4 paw touchdown frame (gap_threshold=5, block_min_size=0)
        - find the block (if multiple) that ends at or just before the x4 paw touchdown frame to find the first
          touchdown frame for each paw
    - Then find the earliest first paw touchdown/paw label == RunStart and initiating limb
    - N.B. the tricky element here is a) tracking errors, b) mouse tapping on the belt in hesitation, c) the
      mouse entering the belt but breifly pausing and tapping the belt with a paw which has already touched down,
      before all paws are down

3c. Finding run ends
    - Find the last touchdown x 4 paws visible
    - From this frame look for blocks (gap_threshold=100, block_min_size=20) where any tail marker is present
    - RunEnd is the last frame of the first block

3d. Finding the transition
    - Focus on forepaws
    - Trim paw_touchdown to the run start and end (touchdown)
    - Find frames where forepaws enter touchdown (swing to stance)
    - Get mean of interpolated x in toe and knuckle for each frame
    - Find frames where the limb is past transition point in f0 and f+1 (post transition position)
    - Create two masks:
        - transition (basic): post transition position + touchdown  --> captures stepping transition and/or sliding transition
        - transition step (backup): post transition + swing to stance transition --> captures stepping transition when sliding
           occured first
    - find first frame for each mask
    - Start with transition frame (basic):
        - find paw/s (L or R) which is initiating the transition by checking if it is in stance for the next 5 frames
        - CHECK:
            - if *one* paw meets this criteria this is categorised as the transition frame/paw
            - if *two* paws meet this criteria categorise transition paw as sliding and transition step paw as the
              transitioning limb, with their respective frame values
            - if *no* paws meet this criteria, CHECK:
                - if transition frame =! transition step frame, CHECK:
                    - if *one* paw is in touchdown for 10 frames preceding transition frame, transition is considered
                      to be performed as a sliding motion and is categorised as a sliding transition
                    - (this covers the case the mouse slides over but the sliding limb is obscured post transition)
        - Except in the case of errors, now have 'transition_paw', 'transition_frame' and 'transition_frame_step' values
    - Now looking at the stepping transition detections, CHECK:
        - if transition_frame == transition_frame_step, categorise the transitioning paw as the initiating limb at
          transition frame (same frame)
        - else, find the paw/s (L/R) which initiate the stepping transition, CHECK
            - if *one* paw meets this criteria, categorise this as the transitioning limb/frame and the transition
              paw/frame as the sliding transition
    - N.B. whenever there is a sliding transition logged in the df, there will always be a (stepping) transition also
      logged, which is considered the true transition frame in this experiment








